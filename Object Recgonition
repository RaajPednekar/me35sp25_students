import rclpy
from rclpy.node import Node
import time
import numpy as np
import cv2  # OpenCV for image processing
from keras.models import load_model
from geometry_msgs.msg import Twist
from rclpy.action import ActionClient
from irobot_create_msgs.action import RotateAngle
from picamera2 import Picamera2
from libcamera import controls
import RPi.GPIO as GPIO
import threading  

# Global Pokémon direction settings
POKEMON_DIRECTIONS = {
    "6 Nidoran": "left",
    #Bad
    "2 Pika": "left",
    #Good
    "4 Charizard": "right",
    #Good
    "0 Pokeball": "right",              
    #Good
    "1 Squirtle": "left",
    #Take photos from back
    "5 Bulbasaur": "right",
    # Take photos from back
    "3 zzz bear": "left",
    #Good
}

# GPIO pins for ultrasonic sensor
GPIO_TRIGGER = 40
GPIO_ECHO = 38

class RoombaController(Node):
    def __init__(self):
        super().__init__('roomba_controller')
        
        self.publisher = self.create_publisher(Twist, '/cmd_vel', 10)
        self.action_client = ActionClient(self, RotateAngle, '/rotate_angle')
        self.direction = 1  # Rotate left or right alternately
        
        # Flags for movement and detection
        self.should_move = True  # Start moving forward initially
        self.detect_pokemon = False  # Activate when an obstacle is detected
        
        # Load Pokémon classification model
        self.model = load_model("/home/tuftsrobot/Wed_Model_V2.h5", compile=False)
        self.class_names = open("/home/tuftsrobot/labels.txt", "r").readlines()
        
        # Set up Picamera2
        self.picam2 = Picamera2()
        self.picam2.set_controls({"AfMode": controls.AfModeEnum.Continuous})
        self.picam2.start()
        time.sleep(1)
        
        # Track Pokémon detection
        self.last_detected_pokemon = None
        self.consecutive_count = 0
        
        # GPIO setup for ultrasonic sensor
        GPIO.setmode(GPIO.BOARD)
        GPIO.setup(GPIO_TRIGGER, GPIO.OUT)
        GPIO.setup(GPIO_ECHO, GPIO.IN)
        
        # Start background thread for ultrasonic monitoring
        self.ultrasonic_thread = threading.Thread(target=self.monitor_distance, daemon=True)
        self.ultrasonic_thread.start()

    def measure_distance(self):
        GPIO.output(GPIO_TRIGGER, True)
        time.sleep(0.00001)
        GPIO.output(GPIO_TRIGGER, False)
        
        start_time = time.time()
        stop_time = time.time()
        
        while GPIO.input(GPIO_ECHO) == 0:
            start_time = time.time()
        while GPIO.input(GPIO_ECHO) == 1:
            stop_time = time.time()
        
        distance_cm = round(((stop_time - start_time) * 34300) / 2, 2)
        return round(distance_cm / 2.54, 2)  # Convert to inches

    def monitor_distance(self):
        while rclpy.ok():
            distance = self.measure_distance()
            self.get_logger().info(f"Distance: {distance} inches")
            
            if distance <= 10.0:  # Obstacle detected
                self.get_logger().info("Obstacle detected! Stopping robot and running Pokémon detection.")
                self.should_move = False
                self.detect_pokemon = True
                self.pokemon_detection_loop()
            else:
                self.should_move = True  # Resume movement when no obstacles
                self.detect_pokemon = False
            
            time.sleep(0.1)

    def send_drive_command(self):
        twist_msg = Twist()
        twist_msg.linear.x = 0.15 * 0.3 if self.should_move else 0.0  # Reduce speed by 70%
        self.publisher.publish(twist_msg)

    
    def rotate_roomba(self, pokemon_name):
        direction = POKEMON_DIRECTIONS.get(pokemon_name, "left")  # Default to left if not found
        angle = 3.14 / 2 if direction == "left" else -3.14 / 2  # Convert 90 degrees to radians

        self.get_logger().info(f'Rotating 90° to the {direction} for {pokemon_name}')
        goal_msg = RotateAngle.Goal()
        goal_msg.angle = angle
        goal_msg.max_rotation_speed = 1.0
        self.action_client.send_goal_async(goal_msg)

        time.sleep(3)  # Allow rotation to complete
        self.should_move = True  # Resume movement

    def pokemon_detection_loop(self):
        while self.detect_pokemon:
            image = self.picam2.capture_array("main")
            image = cv2.cvtColor(image, cv2.COLOR_GRAY2RGB) if len(image.shape) == 2 else image
            image = cv2.cvtColor(image, cv2.COLOR_RGBA2RGB) if image.shape[2] == 4 else image
            
            image_resized = cv2.resize(image, (224, 224), interpolation=cv2.INTER_AREA)
            image_array = np.asarray(image_resized, dtype=np.float32).reshape(1, 224, 224, 3)
            image_array = (image_array / 127.5) - 1
            
            prediction = self.model.predict(image_array)
            index = np.argmax(prediction)
            class_name = self.class_names[index].strip()
            confidence_score = prediction[0][index]
            
            if confidence_score > 0.65:
                self.get_logger().info(f"Detected Pokémon: {class_name} ({confidence_score*100:.2f}%)")
                if class_name == self.last_detected_pokemon:
                    self.consecutive_count += 1
                    self.get_logger().info(f"Confirmed {class_name} {self.consecutive_count}/5 times.")
                else:
                    self.consecutive_count = 1
                    self.last_detected_pokemon = class_name
                
                if self.consecutive_count == 5:
                    self.get_logger().info(f"{class_name} detected 5 times. Rotating and moving forward.")
                    self.rotate_roomba(class_name)
                    self.detect_pokemon = False  # Stop detection and resume movement
                    break
            
            time.sleep(0.5)  # Avoid CPU overload


def main(args=None):
    rclpy.init(args=args)
    node = RoombaController()
    
    try:
        while rclpy.ok():
            if node.should_move:
                node.send_drive_command()
            time.sleep(0.1)
    except KeyboardInterrupt:
        pass
    
    node.get_logger().info("Stopping robot...")
    GPIO.cleanup()
    node.destroy_node()
    rclpy.shutdown()

if __name__ == '__main__':
    main()
